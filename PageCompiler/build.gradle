model {
	components {
		cpspc(NativeExecutableSpec) {
			sources {
				cpp {
					source {
						srcDir 'src'
						include '**/*.cpp'
					}
					exportedHeaders {
						srcDir 'include'
					}
					lib project: ':Net', library: 'Net', linkage: 'shared'
					lib project: ':Util', library: 'Util', linkage: 'shared'
					lib project: ':Foundation', library: 'Foundation', linkage: 'shared'
				}
			}
		}
	}
	binaries {
		withType(NativeExecutableBinarySpec) {
			if (toolChain in VisualCpp) {
				if (buildType == buildTypes.debug) {
					cCompiler.args "/MDd"
					cppCompiler.args "/MDd"
				} else 
				if (buildType == buildTypes.release) {
					cCompiler.args "/MD"
					cppCompiler.args "/MD"
				} else {
					throw new GradleException("Unknown buildType" + buildType)
				}
			}
			if (toolChain in Gcc) {
			}
		}
	}
}
task poco { dependsOn "assemble" }

nugetSpec {
	def String vers = commonNuspecMetadata.find { it.key == "version" }.value;
	nuspec = [
		metadata: commonNuspecMetadata + [
			id:          	"${commonNuspecPrefix}.${project.name}.vs150",
			title:          "Poco ${project.name}",
			dependencies: [
				{ dependency(id: "${commonNuspecPrefix}.Net.vs150", 			version: "${vers}") },
				{ dependency(id: "${commonNuspecPrefix}.Util.vs150",			version: "${vers}") },
				{ dependency(id: "${commonNuspecPrefix}.XML.vs150", 			version: "${vers}") },
				{ dependency(id: "${commonNuspecPrefix}.JSON.vs150", 			version: "${vers}") },
				{ dependency(id: "${commonNuspecPrefix}.Foundation.vs150", 	version: "${vers}") }
			]
		],
		files: [
			{ file(src: "$rootDir\\bin\\Poco${project.name}.*", 								target: "build\\native\\bin") },
			{ file(src: "$rootDir\\lib\\Poco${project.name}.*",									target: "build\\native\\lib") },
			{ file(src: "$rootDir\\bin64\\Poco${project.name}.*",								target: "build\\native\\bin64") },
			{ file(src: "$rootDir\\lib64\\Poco${project.name}.*",								target: "build\\native\\lib64") },
			{ file(src: "$rootDir\\bin\\Poco${project.name}d.*", 								target: "build\\native\\bin") },
			{ file(src: "$rootDir\\lib\\Poco${project.name}d.*",								target: "build\\native\\lib") },
			{ file(src: "$rootDir\\bin64\\Poco${project.name}d.*",								target: "build\\native\\bin64") },
			{ file(src: "$rootDir\\lib64\\Poco${project.name}d.*",								target: "build\\native\\lib64") },
		]
	]
}
task pack { dependsOn "poco"; dependsOn "nugetPack" }

